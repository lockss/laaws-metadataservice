# Copyright (c) 2000-2019 Board of Trustees of Leland Stanford Jr. University,
# all rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
swagger: "2.0"
info:
  title: "LOCKSS Metadata Service REST API"
  version: "2.0.0"
  description: "REST API of the LOCKSS Metadata Service"
  contact:
    name: "LOCKSS Support"
    url: "http://www.lockss.org/"
    email: "lockss-support@lockss.org"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"
host: "laaws.lockss.org:443"
basePath: "/"
tags:
  - name: Default
    description: Default section
  - name: metadata
    description: "Operations related to metadata"
  - name: urls
    description: "Operations that return URLs"
schemes:
  - "https"
produces:
  - "application/json"
security:
  - basicAuth: []
paths:
  /metadata/aus:
    post:
      tags:
        - "metadata"
      summary: "Store the metadata for an AU item"
      description: "Store the metadata for an item belonging to an AU"
      operationId: "postMetadataAusItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "item"
          in: "body"
          description: "The metadata of the AU item to be stored"
          required: true
          schema:
            $ref: "ItemMetadata.yaml"
      responses:
        200:
          description: "The key under which the metadata of the AU item has\
            \ been stored"
          schema:
            type: "integer"
            format: "int64"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        415:
          description: Unsupported Media Type
        500:
          description: "Internal Server Error"
  /metadata/aus/{auid}:
    get:
      tags:
        - "metadata"
      summary: "Get the metadata stored for an AU"
      description: "Get the full metadata stored for an AU given the AU\
        \ identifier or a pageful of the metadata defined by the continuation\
        \ token and size"
      operationId: "getMetadataAusAuid"
      produces:
        - "application/json"
      parameters:
        - name: "auid"
          in: "path"
          description: "The identifier of the AU for which the metadata is\
            \ requested"
          required: true
          type: "string"
        - name: "limit"
          in: "query"
          required: false
          type: "integer"
          description: "The number of items per page"
          default: 50
        - name: "continuationToken"
          in: "query"
          required: false
          type: "string"
          description: "The continuation token of the next page of metadata to\
            \ be returned"
      responses:
        200:
          description: "The metadata of the specified AU"
          schema:
            $ref: "#/definitions/auMetadataPageInfo"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        409:
          description: "Conflict"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "metadata"
      summary: "Delete the metadata stored for an AU"
      description: "Delete the metadata stored for an AU given the AU identifier"
      operationId: "deleteMetadataAusAuid"
      produces:
        - "application/json"
      parameters:
        - name: "auid"
          in: "path"
          description: "The identifier of the AU for which the metadata is to\
            \ be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "The number of deleted AU metadata items"
          schema:
            type: "integer"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal Server Error"
  /urls/openurl:
    get:
      tags:
        - "urls"
      summary: "Performs an OpenURL query"
      description: "Provides the URL that results from performing an OpenURL\
        \ query. With query parameters inline"
      operationId: "getUrlsOpenUrl"
      produces:
        - "application/json"
      parameters:
        - name: "params"
          in: "query"
          description: "The OpenURL parameters"
          required: true
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "The data related to the performed OpenURL query"
          schema:
            $ref: "definitions.yaml#/urlInfo"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
  /urls/doi:
    get:
      tags:
        - "urls"
      summary: "Gets the URL for a DOI"
      description: "Provides the URL for a DOI given the DOI"
      operationId: "getUrlsDoi"
      produces:
        - "application/json"
      parameters:
        - name: "doi"
          in: "query"
          required: true
          type: "string"
          description: "The DOI for which the URL is requested"
      responses:
        200:
          description: "The URL for the specified DOI"
          schema:
            $ref: "definitions.yaml#/urlInfo"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
  /status:
    $ref: "path-status.yaml#/status"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    type: "basic"
definitions:
  auMetadataPageInfo:
    type: "object"
    required:
      - "items"
      - "pageInfo"
    properties:
      items:
        type: "array"
        description: "The metadata for the AU items in the page"
        items:
          $ref: "ItemMetadata.yaml"
      pageInfo:
        $ref: "definitions.yaml#/pageInfo"
    description: "The display page of AU metadata"
