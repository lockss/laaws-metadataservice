# Copyright (c) 2016 Board of Trustees of Leland Stanford Jr. University,
# all rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of Stanford University shall not
# be used in advertising or otherwise to promote the sale, use or other dealings
# in this Software without prior written authorization from Stanford University.
#
swagger: '2.0'
info:
  description: Metadata Query for LAAWS
  version: 1.0.0
  title: LAAWS-Metadata Query
  contact:
    name: 'LOCKSS Support'
    url: 'http://www.lockss.org/'
    email: 'support@lockss.org'
  license:
    name: 'Modified BSD License'
    url: 'http://www.lockss.org/support/open-source-license/'
host: 'laaws.lockss.org:443'
basePath: /mdq
tags:
  - name: Default
    description: Default section
  - name: au
    description: Tasks on AUs
  - name: url
    description: Tasks that return URLs.
schemes:
  - https
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
security:
  - basicAuth: []
paths:
  '/au/{auid}':
    get:
      tags:
        - au
      summary: Get the metadata stored for an AU
      description: Get the full metadata stored for an AU given the AU identifier or a pageful of the metadata defined by the page index and size
      operationId: getAuAuid
      consumes: []
      produces:
        - application/json
      parameters:
        - name: 'auid'
          in: path
          description: The identifier of the AU for which the metadata is requested
          required: true
          type: string
        - name: 'page'
          in: query
          description: The identifier of the page of metadata to be returned
          required: false
          type: integer
          default: 1
        - name: 'limit'
          in: query
          description: The number of items per page
          required: false
          type: integer
          default: 50
      responses:
        '200':
          description: The metadata of the specified AU
          schema:
            $ref: '#/definitions/auMetadataPageInfo'
        '404':
          description: AU not found
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  /url/openurl:
    post:
      tags:
        - url
      summary: Performs an OpenURL query.
      description: Provides the URL that results from performing an OpenURL query.
      operationId: postOpenUrl
      consumes: []
      produces:
        - application/json
      parameters:
        - name: params
          in: body
          description: The OpenURL parameters.
          required: true
          schema:
            $ref: '#/definitions/openUrlParams'
      responses:
        '200':
          description: The data related to the performed OpenURL query.
          schema:
            $ref: '#/definitions/urlInfo'
  '/url/doi/{doi}':
    get:
      tags:
        - url
      summary: Gets the URL for a DOI.
      description: Provides the access URL for a DOI given the DOI.
      operationId: getUrlDoi
      consumes: []
      produces:
        - application/json
      parameters:
        - name: doi
          in: path
          description: The DOI for which the access URL is requested.
          required: true
          type: string
      responses:
        '200':
          description: The access URL for the specified DOI.
          schema:
            $ref: '#/definitions/urlInfo'
definitions:
  auMetadataPageInfo:
    type: object
    required:
      - items
      - pageInfo
    properties:
      items:
        type: array
        description: The metadata for the AU items in the page.
        items:
          $ref: '#/definitions/itemMetadata'
      pageInfo:
        $ref: '#/definitions/pageInfo'
    description: The display page of AU metadata.
  itemMetadata:
    type: object
    properties:
      scalarMap:
        type: object
        description: The map of scalar metadata elements for this item.
        additionalProperties:
          type: string
          description: The scalar value of the metadata for the key.
      listMap:
        type: object
        description: The map of listed metadata elements for this item.
        additionalProperties:
          type: array
          description: The list value of the metadata for the key.
          items:
            type: string
      mapMap:
        type: object
        description: The map of mapped metadata elements for this item.
        additionalProperties:
          type: object
          description: The map value of the metadata for the key.
          additionalProperties:
            type: string
    description: The metadata generated for a single item.
  pageInfo:
    type: object
    required:
      - curLink
      - currentPage
      - resultsPerPage
      - totalCount
    properties:
      totalCount:
        type: integer
        format: int32
        description: The total number of elements to be paginated.
      resultsPerPage:
        type: integer
        format: int32
        description: The number of results per page.
      currentPage:
        type: integer
        format: int32
        description: The current page number.
      curLink:
        type: string
        description: The link to the current page.
      nextLink:
        type: string
        description: The link to the next page.
    description: The information related to pagination of content.
  openUrlParams:
    type: object
    description: The map of OpenURL query parameters.
    additionalProperties:
      type: string
      description: The value of the parameter for the parameter name.
  urlInfo:
    type: object
    required:
      - params
      - url
    properties:
      params:
        type: object
        description: The parameters that define a URL.
        additionalProperties:
          type: string
          description: The value of the parameter for the parameter name.
      url:
        type: string
        description: The URL.
    description: The information related to a URL.
