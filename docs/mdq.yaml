# Copyright (c) 2016-2017 Board of Trustees of Leland Stanford Jr. University,
# all rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of Stanford University shall not
# be used in advertising or otherwise to promote the sale, use or other dealings
# in this Software without prior written authorization from Stanford University.
#
swagger: "2.0"
info:
  description: "API of Metadata Service for LAAWS"
  version: "1.0.0"
  title: "LAAWS Metadata Service API"
  termsOfService: "http://www.lockss.org/terms/"
  contact:
    name: "LOCKSS Support"
    url: "http://www.lockss.org/"
    email: "support@lockss.org"
  license:
    name: "Modified BSD License"
    url: "http://www.lockss.org/support/open-source-license/"
host: "laaws.lockss.org:443"
basePath: "/"
tags:
- name: metadata
  description: "Operations related to metadata"
- name: urls
  description: "Operations that return URLs"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []
paths:
  /metadata/aus:
    post:
      tags:
      - "metadata"
      summary: "Store the metadata for an AU item"
      description: "Store the metadata for an item belonging to an AU"
      operationId: "postMetadataAusItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "item"
        in: "body"
        description: "The metadata of the AU item to be stored"
        required: true
        schema:
          $ref: "#/definitions/itemMetadata"
      responses:
        200:
          description: "The key under which the metadata of the AU item has\
            \ been stored"
          schema:
            type: "integer"
            format: "int64"
        401:
          description: "Unauthorized request"
        403:
          description: "Forbidden request"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
  /metadata/aus/{auid}:
    get:
      tags:
      - "metadata"
      summary: "Get the metadata stored for an AU"
      description: "Get the full metadata stored for an AU given the AU\
        \ identifier or a pageful of the metadata defined by the page index and\
        \ size"
      operationId: "getMetadataAusAuid"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auid"
        in: "path"
        description: "The identifier of the AU for which the metadata is\
          \ requested"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        description: "The identifier of the page of metadata to be returned"
        default: 1
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The number of items per page"
        default: 50
      responses:
        200:
          description: "The metadata of the specified AU"
          schema:
            $ref: "#/definitions/auMetadataPageInfo"
        401:
          description: "Unauthorized request"
        404:
          description: "AU not found"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
    delete:
      tags:
      - "metadata"
      summary: "Delete the metadata stored for an AU"
      description: "Delete the metadata stored for an AU given the AU identifier"
      operationId: "deleteMetadataAusAuid"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auid"
        in: "path"
        description: "The identifier of the AU for which the metadata is to be\
          \ deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "The number of deleted AU metadata items"
          schema:
            type: "integer"
        401:
          description: "Unauthorized request"
        403:
          description: "Forbidden request"
        404:
          description: "AU not found"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
  /urls/openurl:
    get:
      tags:
      - "urls"
      summary: "Performs an OpenURL query"
      description: "Provides the URL that results from performing an OpenURL\
        \ query. With query parameters inline"
      operationId: "getUrlsOpenUrl"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "params"
        in: "query"
        description: "The OpenURL parameters"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "The data related to the performed OpenURL query"
          schema:
            $ref: "#/definitions/urlInfo"
        401:
          description: "Unauthorized request"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
  /urls/doi/{doi}:
    get:
      tags:
      - "urls"
      summary: "Gets the URL for a DOI"
      description: "Provides the URL for a DOI given the DOI"
      operationId: "getUrlsDoi"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "doi"
        in: "path"
        required: true
        type: "string"
        description: "The DOI for which the URL is requested"
      responses:
        200:
          description: "The URL for the specified DOI"
          schema:
            $ref: "#/definitions/urlInfo"
        401:
          description: "Unauthorized request"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    type: "basic"
definitions:
  auMetadataPageInfo:
    type: "object"
    required:
    - "items"
    - "pageInfo"
    properties:
      items:
        type: "array"
        description: "The metadata for the AU items in the page"
        items:
          $ref: "#/definitions/itemMetadata"
      pageInfo:
        $ref: "#/definitions/pageInfo"
    description: "The display page of AU metadata"
  itemMetadata:
    type: "object"
    properties:
      scalarMap:
        type: "object"
        description: "The map of scalar metadata elements for this item"
        additionalProperties:
          type: "string"
          description: "The scalar value of the metadata for the key"
      listMap:
        type: "object"
        description: "The map of listed metadata elements for this item"
        additionalProperties:
          type: "array"
          description: "The list value of the metadata for the key"
          items:
            type: "string"
      mapMap:
        type: "object"
        description: "The map of mapped metadata elements for this item"
        additionalProperties:
          type: "object"
          description: "The map value of the metadata for the key"
          additionalProperties:
            type: "string"
    description: "The metadata generated for a single item"
  pageInfo:
    type: "object"
    required:
    - "curLink"
    - "currentPage"
    - "resultsPerPage"
    - "totalCount"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
        description: "The total number of elements to be paginated"
      resultsPerPage:
        type: "integer"
        format: "int32"
        description: "The number of results per page"
      currentPage:
        type: "integer"
        format: "int32"
        description: "The current page number"
      curLink:
        type: "string"
        description: "The link to the current page"
      nextLink:
        type: "string"
        description: "The link to the next page"
    description: "The information related to pagination of content"
  urlInfo:
    type: "object"
    required:
    - "params"
    - "urls"
    properties:
      params:
        type: "object"
        description: "The parameters that define the resulting URLs"
        additionalProperties:
          type: "string"
          description: "The value of the parameter for the parameter name"
      urls:
        type: "array"
        description: "The URLs"
        items:
          type: "string"
    description: "The information related to a resulting list of URLs"
